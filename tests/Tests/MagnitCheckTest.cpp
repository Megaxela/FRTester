//
// Created by megaxela on 23.02.17.
//

#include <Tools/Logger.h>
#include <Testing/StaticTestFabric.h>
#include "MagnitCheckTest.h"

REGISTER_STATIC_TEST(MagnitCheckTest)

MagnitCheckTest::MagnitCheckTest() :
    MagnitCheckTest(nullptr)
{

}

MagnitCheckTest::MagnitCheckTest(TestEnvironment *environment) :
    AbstractTest(
            environment,
            "Тест для Магнита",
            "",
            {}
    )
{

}

bool MagnitCheckTest::execute()
{
    std::vector<std::string> bytes = {
            "02 30 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 A0 86 01 00 00 FF FF FF FF FF 00 00 00 00 00 00 01 04 0A EF EE E4 E0 F0 EE F7 ED E0 FF 20 EA E0 F0 F2 E0 9A",
            "02 86 FF 45 1E 00 00 00 00 00 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 EF EE E4 E0 F0 EE F7 ED E0 FF 20 EA E0 F0 F2 E0 D2",

            "02 30 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 F0 49 02 00 00 FF FF FF FF FF 00 00 00 00 00 01 01 04 01 C4 F3 F5 E8 20 22 D8 E0 ED E5 EB FC 20 B9 35 22 5B ",
            "02 86 FF 45 1E 00 00 00 50 C3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 C4 F3 F5 E8 20 22 D8 E0 ED E5 EB FC 20 B9 35 22 16",

            "02 30 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 A0 86 01 00 00 FF FF FF FF FF 00 00 00 00 00 00 01 04 0A EF EE E4 E0 F0 EE F7 ED E0 FF 20 EA E0 F0 F2 E0 9A",
            "02 86 FF 45 1E 00 00 00 00 00 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 EF EE E4 E0 F0 EE F7 ED E0 FF 20 EA E0 F0 F2 E0 D2",

            "02 34 FF 0D 1E 00 00 00 01 E8 03 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 C4 F3 F5 E8 20 22 D8 E0 ED E5 EB FC 20 B9 35 22 00 00 94",
            "02 86 FF 45 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 C4 F3 F5 E8 20 22 D8 E0 ED E5 EB FC 20 B9 35 22 85",

            "02 30 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 A0 86 01 00 00 FF FF FF FF FF 00 00 00 00 00 00 01 04 0A EF EE E4 E0 F0 EE F7 ED E0 FF 20 EA E0 F0 F2 E0 9A",
            "02 86 FF 45 1E 00 00 00 00 00 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 EF EE E4 E0 F0 EE F7 ED E0 FF 20 EA E0 F0 F2 E0 D2",

            "02 34 FF 0D 1E 00 00 00 01 E8 03 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 C4 F3 F5 E8 20 22 D8 E0 ED E5 EB FC 20 B9 35 22 00 00 94",
            "02 86 FF 45 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A0 86 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 C4 F3 F5 E8 20 22 D8 E0 ED E5 EB FC 20 B9 35 22 85",

            "02 29 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 80 84 1E 00 00 FF FF FF FF FF 00 00 00 00 00 01 01 06 01 D2 E5 EB E5 E2 E8 E7 EE F0 AA",
            "02 7F FF 45 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 84 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 D2 E5 EB E5 E2 E8 E7 EE F0 0A",

            "02 3C FF 46 1E 00 00 00 01 40 42 0F 00 00 00 40 0D 03 00 00 FF FF FF FF FF 00 00 00 00 00 00 01 07 0A EE EF EB E0 F2 E0 20 EA F0 E5 E4 E8 F2 E0 20 EF EE 20 E4 EE E3 EE E2 EE F0 F3 20 B9 63",
            "02 92 FF 45 1E 00 00 00 40 0D 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 EE EF EB E0 F2 E0 20 EA F0 E5 E4 E8 F2 E0 20 EF EE 20 E4 EE E3 EE E2 EE F0 F3 20 B9 30",

            "02 25 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 80 96 98 00 00 FF FF FF FF FF 00 00 00 00 00 00 01 02 01 CA F3 F5 ED FF 23",
            "02 7B FF 45 1E 00 00 00 00 00 00 00 00 40 4B 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 4B 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 CA F3 F5 ED FF 00",

            "02 25 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 80 96 98 00 00 FF FF FF FF FF 00 00 00 00 00 01 01 04 01 CA F3 F5 ED FF 24",
            "02 7B FF 45 1E 00 00 00 00 00 00 00 00 40 4B 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 4B 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 CA F3 F5 ED FF 00",

            "02 27 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 40 42 0F 00 00 FF FF FF FF FF 00 00 00 00 00 01 01 05 01 CA EE EB E1 E0 F1 E0 A5",
            "02 7D FF 45 1E 00 00 00 40 0D 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 35 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 CA EE EB E1 E0 F1 E0 70",

            "02 39 FF 46 1E 00 00 00 01 40 42 0F 00 00 00 00 35 0C 00 00 FF FF FF FF FF 00 00 00 00 00 00 01 07 0A EE EF EB E0 F2 E0 20 EA F0 E5 E4 E8 F2 E0 20 E7 E0 20 EA EE EB E1 E0 F1 F3 6A",
            "02 8F FF 45 1E 00 00 00 00 35 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 EE EF EB E0 F2 E0 20 EA F0 E5 E4 E8 F2 E0 20 E7 E0 20 EA EE EB E1 E0 F1 F3 21"
    };

    environment()->driver()->openShift((uint32_t) 30);

    environment()->tools()->waitForPrintingFinished(30);

    for (uint32_t i = 0; i < bytes.size(); ++i)
    {
        std::string hex = bytes[i];

        hex.erase(
                std::remove(
                        hex.begin(),
                        hex.end(),
                        ' '
                ),
                hex.end()
        );

        environment()
                ->driver()
                ->physicalInterface()
                ->write(
                ByteArray::fromHex(
                        hex
                )
        );

        auto response = environment()
                ->driver()
                ->protocol()
                ->receiveDataFromInterface(
                        environment()->driver()->physicalInterface(),
                        0
                );

        if (response.empty())
        {
            Error("От ФР не было получено данных.");
            return false;
        }

        response = environment()->driver()->protocol()->proceedReceivedData(response);

        if (environment()->driver()->protocol()->needResponseAfterReceivedData())
        {
            environment()->driver()->physicalInterface()->write(
                    environment()->driver()->protocol()->responseAfterReceivedData()
            );
        }

        Log("Ответ: " + response.toHex());

        if ((i + 1) % 2 == 0)
        {
            environment()->tools()->waitForPrintingFinished(30);
            environment()->logger()->log(
                    "Чек №" + std::to_string((i + 1) / 2) + " пробит."
            );

            auto checkResult = environment()->tools()->messageQuestion(
                    "Напечатан чек №" + std::to_string((i + 1) / 2) + " проверьте чек.",
                    "Все нормально",
                    "Все плохо"
            );

            if (!checkResult)
            {
                environment()->logger()->log("Пользователь сообщил об ошибке. Конец.");
                return false;
            }
        }
    }

    return true;
}
