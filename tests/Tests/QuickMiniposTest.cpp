//
// Created by megaxela on 06.03.17.
//

#include <include/Testing/StaticTestFabric.h>
#include "QuickMiniposTest.h"

REGISTER_STATIC_TEST(QuickMiniposTest);

QuickMiniposTest::QuickMiniposTest() :
    AbstractTest(nullptr,
                 "MINIPOS тест",
                 "",
                 {{}})
{

}

bool QuickMiniposTest::execute()
{
    std::vector<std::string> commands = {
            "FC",
            "11 1E 00 00 00",
            "13 1E 00 00 00",
            "FC",
            "11 1E 00 00 00",
            "2E 1E 00 00 00 02 02",
            "1E 1E 00 00 00 02 1E 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
            "2E 1E 00 00 00 01 0D",
            "1F 1E 00 00 00 01 01 00 0D",
            "11 1E 00 00 00",
            "2E 1E 00 00 00 01 0E",
            "1E 1E 00 00 00 01 01 00 0E 00",
            "2E 1E 00 00 00 01 10",
            "1E 1E 00 00 00 01 01 00 10 00", //Ошибка 1 таб 1 ряд 16 поле
            "2E 1E 00 00 00 05 01",
            "1E 1E 00 00 00 05 02 00 01 CA F0 E5 E4 E8 F2 EE EC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
            "1E 1E 00 00 00 05 03 00 01 D2 E0 F0 EE E9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
            "1E 1E 00 00 00 05 04 00 01 CF CB C0 D2 2E 20 CA C0 D0 D2 CE C9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
            "FC",
            "11 1E 00 00 00",
            "2E 1E 00 00 00 01 03",
            "1F 1E 00 00 00 01 01 00 03",
            "2E 1E 00 00 00 01 07",
            "1F 1E 00 00 00 01 01 00 07",
            "2E 1E 00 00 00 01 19",
            "1F 1E 00 00 00 01 01 00 19",
            "2D 1E 00 00 00 04"
            "2E 1E 00 00 00 04 01",
            "1F 1E 00 00 00 04 01 00 01",
            "1F 1E 00 00 00 04 02 00 01",
            "1F 1E 00 00 00 04 03 00 01",
            "1F 1E 00 00 00 04 04 00 01",
            "1F 1E 00 00 00 04 05 00 01",
            "1F 1E 00 00 00 04 06 00 01",
            "1F 1E 00 00 00 04 07 00 01",
            "1F 1E 00 00 00 04 08 00 01",
            "1F 1E 00 00 00 04 09 00 01",
            "1F 1E 00 00 00 04 0A 00 01",
            "1F 1E 00 00 00 04 0B 00 01",
            "1F 1E 00 00 00 04 0C 00 01",
            "1F 1E 00 00 00 04 0D 00 01",
            "1F 1E 00 00 00 04 0E 00 01",
            "2E 1E 00 00 00 08 01",
            "1F 1E 00 00 00 08 01 00 01",
            "2E 1E 00 00 00 08 02",
            "1F 1E 00 00 00 08 01 00 02",
            "11 1E 00 00 00",
            "2E 1E 00 00 00 02 02",
            "1E 1E 00 00 00 02 1E 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
    };

    for (uint32_t i = 0; i < commands.size(); ++i)
    {
        std::string hex = commands[i];

        hex.erase(
                std::remove(
                        hex.begin(),
                        hex.end(),
                        ' '
                ),
                hex.end()
        );

        environment()->driver()->sendRaw(
                ByteArray::fromHex(hex)
        );

        environment()->tools()->messageNotify("Выполнить следующую команду.");
    }

    return true;
}
